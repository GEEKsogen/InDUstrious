{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"function debug(a,b)if a~=debugId then return end;system.print(\"REP#\"..self.getId()..\" \"..b)end;function slotValid(c)return c and type(c)==\"table\"and type(c.export)==\"table\"and c.getElementClass end;function queryRemotesForChanges()function queryRemote(a,d)if not slotValid(d)or not d.hasKey then return end;if d.getIntValue(\"updated\")==0 then return end;function processKey(e,d)local f=tonumber(string.match(e,\"(%d+)_updated\"))if not f then return end;local g=d.getIntValue(e)if g~=1 then return end;debug(f,\"Industry Unit #\"..f..\" has updates\")local h=d.getStringValue(f)if h==nil or h==\"\"then debug(f,\"Skipping #\"..f..\" (data missing)\")return end;if not dataUpdates[d]then dataUpdates[d]={}end;dataUpdates[d][f]=h;debug(f,\"Set info for update\")end;local i=d.getKeys()if i==nil or i==\"\"then return end;local j=json.decode(i)for k,e in ipairs(j)do processKey(e,d)end end;for a,d in pairs(remoteDatabanks)do queryRemote(a,d)end end;function processDataUpdates()if not masterDatabank then return end;local l=throttle;for d,m in pairs(dataUpdates)do for e,n in pairs(m)do l=l-1;if l==0 then system.print(\"Throttle data\")return end;debug(e,\"Writing data for \"..e..\" from remote #\"..d.getId()..\" to master #\"..masterDatabank.getId())masterDatabank.setStringValue(e,n)masterDatabank.setIntValue(e..\"_updated\",1)d.setIntValue(e..\"_updated\",0)dataUpdates[d][e]=nil end;if next(dataUpdates[d])==nil then system.print(\"All done for Remote #\"..d.getId())masterDatabank.setIntValue(\"updated\",1)d.setIntValue(\"updated\",0)dataUpdates[d]=nil end end end;function processTick()if not masterDatabank then return end;queryRemotesForChanges()end;function onStop()system.print(\"Board [\"..self.getId()..\"] OFF\")end;function processFirst()unit.stopTimer(\"First\")for o,c in pairs(unit)do if slotValid(c)and c.getElementClass():lower()=='databankunit'then if c.getIntValue(\"master\")==1 then if masterDatabank then system.print(\"Warning! Unexpected master databank found in slot \"..o)else masterDatabank=c;debugId=masterDatabank.getIntValue(\"debugId\")if debugId>0 then system.print(\"Debugging #\"..debugId)end;throttle=masterDatabank.getIntValue(\"throttle\")if not throttle then throttle=25 end end else remoteDatabanks[c.getId()]=c end end end;if not masterDatabank then system.print(\"Master Databank not connected to relay board! #\"..self.getId())self.exit()return end;for k,d in pairs(remoteDatabanks)do d.setIntValue(\"debugId\",debugId)end end;system.print(\"Board [\"..self.getId()..\"] ON\")throttle=25;debugId=0;unit.hide()masterDatabank=nil;remoteDatabanks={}dataUpdates={}unit.setTimer(\"First\",1)unit.setTimer(\"Live\",7)unit.setTimer(\"WriteData\",3)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"onStop()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"processFirst()","filter":{"args":[{"value":"First"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"processTick()","filter":{"args":[{"value":"Live"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"processDataUpdates()","filter":{"args":[{"value":"WriteData"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}