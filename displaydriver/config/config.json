{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"PlayerContainerProficiency=30;PlayerContainerOptimization=0;LowLevel=25;HighLevel=50;ContainerMatch=\"C_(.+)\"OverflowMatch=\"O_(.+)\"Font_Size=0.8;US_Spellings=false;properties={Bauxite={density=1.2808,ore=true},Coal={density=1.3465,ore=true},Quartz={density=2.6498,ore=true},Hematite={density=5.0398,ore=true},Chromite={density=4.54,ore=true},Malachite={density=3.9997,ore=true},Limestone={density=2.7105,ore=true},Natron={density=1.5499,ore=true},Petalite={density=2.4119,ore=true},Garnierite={density=2.6,ore=true},Acanthite={density=7.1995,ore=true},Pyrite={density=5.0098,ore=true},Cobaltite={density=6.33,ore=true},Cryolite={density=2.9495,ore=true},Kolbeckite={density=2.37,ore=true},GoldNuggets={density=19.3,ore=true},Rhodonite={density=3.76,ore=true},Columbite={density=5.38,ore=true},Illmenite={density=4.55,ore=true},Vanadinite={density=6.95,ore=true},Hydrogen={density=0.069785,short=\"H₂\"},Oxygen={density=1.0000,short=\"O₂\"},Aluminium={density=2.7,usSpelling=\"Aluminum\",short=\"Al\"},Carbon={density=2.27,short=\"C\"},Silicon={density=2.33,short=\"Si\"},Iron={density=7.85,short=\"Fe\"},Calcium={density=1.55,short=\"Ca\"},Chromium={density=7.19,short=\"Cr\"},Copper={density=8.96,short=\"Cu\"},Sodium={density=0.97,short=\"Na\"},Lithium={density=0.53,short=\"Li\"},Nickel={density=8.91,short=\"Ni\"},Silver={density=10.49,short=\"Ag\"},Sulfur={density=1.82,short=\"S\"},Cobalt={density=8.9,short=\"Co\"},Fluorine={density=1.7,short=\"Fl\"},Gold={density=19.3,short=\"Au\"},Scandium={density=2.98,short=\"Sc\"},Manganese={density=7.21,short=\"Mn\"},Niobium={density=8.57,short=\"Ni\"},Titanium={density=4.51,short=\"Ti\"},Vanadium={density=6.00,short=\"Va\"},Silumin={density=3.00},Steel={density=8.05},AlFe={density=7.50},AlLi={density=2.50},CaRefCu={density=8.10},CuAg={density=9.20},Duralumin={density=2.80},[\"Stainless steel\"]={density=7.75,short=\"S.Steel\"}}function slotValid(a)return a and type(a)==\"table\"and type(a.export)==\"table\"and a.getElementClass end;local b={}local c={}local d={}function onStart()for e,a in pairs(unit)do if slotValid(a)then if a.setHTML then local f=[[<div style=\"width:100vw\"><div style=\"margin-top: 10px;padding: 0px;width: 100vw;display: inline-block;\">Hamsters wake up ...</div></div>]]a.activate()a.setHTML(f)elseif not databank and a.getStringValue then databank=a elseif not core and a.getConstructId then core=a end end end;if not core then return end;for e,a in pairs(unit)do if slotValid(a)then if a.setHTML then local g=a.getId()if g then local h=core.getElementNameById(g)if h==\"ContDisplay1\"then b[1]=a elseif h==\"ContDisplay2\"then b[2]=a elseif h==\"ProdDisplay1\"then c[1]=a elseif h==\"ProdDisplay2\"then c[2]=a end end end end end;function extractSubstanceName(h,i)local j=string.gsub(h,i,\"\")return j end;function getBaseCointainerProperties(g)local k=core.getElementMaxHitPointsById(g)if k<=123 then return 0.0,0.0 elseif k<=998 then return 229.09,1000.0 elseif k<=7996 then return 1281.31,8000.0 elseif k<=17315 then return 7421.35,64000.0 else return 14842.7,128000.0 end end;function addContainer(g)if not core.getElementTypeById(g)==\"container\"then return end;local h=core.getElementNameById(g)if not h then return end;local l=false;local j=string.match(h,\"^\"..ContainerMatch)if not j then j=string.match(h,\"^\"..OverflowMatch)if not j then return end;l=true end;local m=properties[j]if not m then return end;local n,o=getBaseCointainerProperties(g)capacity=o*(1.0+PlayerContainerProficiency/100)d[g]={name=h,id=g,substance=j,capacity=capacity,selfMass=n,property=m,overflow=l,isHub=o==0}end;local p=core.getElementIdList()for q,g in ipairs(p)do addContainer(g)end end;local r={\"XS\",\" S\",\" M\",\" L\",\"XL\"}function assemblySize(g)local s=core.getElementMassById(g)local t=math.floor(math.log(s-90,10)+0.1)return t,r[t]end;tolColours={blue=\"#332288\",cyan=\"#66CCEE\",green=\"#228833\",yellow=\"#CCBB44\",red=\"#EE6677\",purple=\"#AA3377\",grey=\"#BBBBBB\"}local u=\"darkslategray\"local v=tolColours.green;local w=tolColours.cyan;local x=tolColours.yellow;local y=tolColours.red;local z=[[monospace]]local A={h1=[[<head><style> .bar { text-align: left; vertical-align: top; border-radius: 0 0em 0em 0; } </style></head>]],d1=[[<div class=\"bootstrap\" style=\"text-transform:none; text-align:left; vertical-align: text-bottom;\r\n    display: flex; flex-direction: column; justify-content: flex-end; align-items: flex-end; margin: auto;\">]],de=[[</div>]],t1=[[<table style=\"Font-Family: ]]..z..[[;  font-size: 4em; table-layout: auto; width: 100vw;\">]],t2=[[<table style=\"Font-Family: ]]..z..[[;  font-size: 2.6em; table-layout: auto; width: 100vw;\">]],te=[[</table>]],r1=[[<tr style=\"width:100vw; background-color: ]]..u..[[; color: white;\">]],r2=[[<tr>]],re=[[</tr>]],thL=[[<th style=\"text-align:left; margin-left:20px\">]],thL2=[[<th style=\"text-align:left; margin-left:20px\" colspan=\"2\">]],thR=[[<th style=\"text-align:right; margin-right:20px\">]],th3=[[<th style=\"background-color: ]]..u..[[;\">&nbsp;</th>]],th4=[[<th colspan=9>&nbsp;</th>]],the=[[</th>]],nbr=[[<nobr>]],nbre=[[</nobr>]]}function refreshContainerDisplay(B,C,D)local E={}function processSubstanceContainer(F)local G=(core.getElementMassById(F.id)-F.selfMass)*(1.0+PlayerContainerOptimization/100)local H=G/F.property.density;local I=F.substance;if F.overflow then I=\"O_\"..F.substance end;if E[I]then E[I].volume=E[I].volume+H;E[I].contentMass=E[I].contentMass+G;E[I].capacity=E[I].capacity+F.capacity else E[I]={substance=F.substance,volume=H,contentMass=G,capacity=F.capacity,overflow=F.overflow}end end;for q,F in pairs(d)do processSubstanceContainer(F)end;function statusColour(J,K)if K then J=100.0-J end;if J<=LowLevel then return y end;if J<=HighLevel then return x end;return v end;function barGraph(J,K,L)if not L then L=1 end;local M=statusColour(J,K)return[[<td class=\"bar\" valign=top colspan=\"]]..L..[[\">\r\n        <svg>\r\n            <rect x=\"0\" y=\"1\" rx=\"4\" ry=\"4\" height=\"2.5vw\" width=\"17.2vw\" stroke=\"white\" stroke-width=\"1\" rx=\"0\" />\r\n            <rect x=\"1\" y=\"2\" rx=\"3\" ry=\"3\" height=\"2.4vw\" width=\"]]..17*J/100 ..[[vw\" fill=\"]]..M..[[\" opacity=\"1.0\" rx=\"0\" />\r\n            <text x=\"1\" y=\"23\" fill=\"white\" text-align=\"left\" margin-left=\"3\" font-family=\"]]..z..[[\">]]..string.format(\"%02.1f\",J)..[[%</text>\r\n        </svg>\r\n        </td>]]end;function correctSpelling(N)if US_Spellings and properties[N]and properties[N].usSpelling then return properties[N].usSpelling end;return N end;function displayFormat(j,l)local N=correctSpelling(j)local I=j;if l then I=\"O_\"..j end;local O=E[I]if not O then if l then return nil end;return\"?\",0.0,\"kℓ\",N end;local P=properties[j].short;if l then if P then N=P..\" Overflow\"else N=N..\" OF\"end elseif N:len()>12 and P then N=P end;local H=O.volume;local J=math.min(100.0*H/O.capacity,100.0)if H>=1000000 then return string.format(\"%02.1f\",H/1000000),J,\"Mℓ\",N end;return string.format(\"%02.1f\",H/1000),J,\"kℓ\",N end;function cell(Q,R)return[[<th style=\"width:]]..Q..[[vw; text-align:]]..R..[[;\">]]end;function newHTMLRow(S,T,l)local U,V,W,X=displayFormat(S,l)if not U then return\"\"end;local Y,Z,_,a0=displayFormat(T,l)local a1=\"⇒\"if l or not E[S]or not E[S].ore then a1=\"&nbsp;\"end;resHTML=A.r2 ..A.thL..X..A.the..A.thR..U..W..A.the..barGraph(V,l)..\"<th style=\\\"background-color: \"..u..\"\\\">\"..a1 ..A.the..A.thL..a0 ..A.the..A.thR..Y.._..A.the..barGraph(Z,l)..A.re;return resHTML end;local a2=[[<th style=\"width:18vw; text-align:left;\">]]local a3=[[<th style=\"width:13vw; text-align:left;\"></th>\r\n                  <th style=\"width:17vw; text-align:left;\"></th>]]function newHTMLHeader(X,a0)return A.r1 ..a2 ..X..A.the..a3 ..[[<th style=\"width:2vw\"/>]]..a2 ..a0 ..A.the..a3 end;if B then local f=A.h1 ..A.d1 ..A.t2;f=f..newHTMLHeader(\"T3 Ores\",\"T3 Pures\")f=f..newHTMLRow(\"Petalite\",\"Lithium\")f=f..newHTMLRow(\"Garnierite\",\"Nickel\")f=f..newHTMLRow(\"Pyrite\",\"Sulfur\")f=f..newHTMLRow(\"Acanthite\",\"Silver\")f=f..newHTMLHeader(\"T2 Ores\",\"T2 Pures\")f=f..newHTMLRow(\"Natron\",\"Sodium\")f=f..newHTMLRow(\"Malachite\",\"Copper\")f=f..newHTMLRow(\"Limestone\",\"Calcium\")f=f..newHTMLRow(\"Chromite\",\"Chromium\")f=f..newHTMLHeader(\"T1 Ores\",\"T1 Pures\")f=f..newHTMLRow(\"Bauxite\",\"Aluminium\")f=f..newHTMLRow(\"Coal\",\"Carbon\")f=f..newHTMLRow(\"Hematite\",\"Iron\")f=f..newHTMLRow(\"Quartz\",\"Silicon\")f=f..newHTMLHeader(\"H₂\",\"O₂\")f=f..newHTMLRow(\"Hydrogen\",\"Oxygen\")f=f..newHTMLRow(\"Hydrogen\",\"Oxygen\",true)f=f..A.r1 ..A.th4 ..A.re;f=f..A.te..A.de;B.setHTML(f)end;if C then local f=A.h1 ..A.d1 ..A.t2;f=f..newHTMLHeader(\"T5 Ores\",\"T5 Pures\")f=f..newHTMLRow(\"Rhodonite\",\"Manganese\")f=f..newHTMLRow(\"Columbite\",\"Niobium\")f=f..newHTMLRow(\"Illmenite\",\"Titanium\")f=f..newHTMLRow(\"Vanadinite\",\"Vanadium\")f=f..newHTMLHeader(\"T4 Ores\",\"T4 Pures\")f=f..newHTMLRow(\"Cobaltite\",\"Cobalt\")f=f..newHTMLRow(\"Cryolite\",\"Fluorine\")f=f..newHTMLRow(\"GoldNuggets\",\"Gold\")f=f..newHTMLRow(\"Kolbeckite\",\"Scandium\")f=f..newHTMLHeader(\"Alloys\",\"Alloys\")f=f..newHTMLRow(\"Silumin\",\"Steel\")f=f..newHTMLRow(\"AlFe\",\"CaRefCu\")f=f..newHTMLRow(\"Stainless steel\",\"Duralumin\")f=f..A.r1 ..A.th4 ..A.re;f=f..A.te..A.de;C.setHTML(f)end end;dataUpdates={}assemblies={}alerts={}function refreshIndustryScreens(B,C,D)function newHTMLRow(X,a0,a4,a5,a6,a7)resHTML=[[<tr style=\"color: ]]..a6 ..[[; font-size: ]]..a7 ..[[em;\">>\r\n                ]]..A.thL..[[&nbsp;</th>\r\n                ]]..A.thL..X..[[</th>\r\n                ]]..A.thL..a0 ..[[</th>\r\n                ]]..A.thR..a4 ..[[</th>\r\n                ]]..A.thL..a5 ..[[</th>\r\n            </tr>]]return resHTML end;function processData(I)if I==\"updated\"then return end;local a8=databank.getStringValue(I)if a8==nil or a8==\"\"then return end;local a9=json.decode(a8)if not a9 or type(a9)~=\"table\"or not a9.status or not D and a9.updated~=1 then return end;local h=core.getElementNameById(I)local aa=core.getElementTypeById(I)if aa==\"assembly line\"then local t,a7=assemblySize(I)local ab=\"\"if not string.find(h,\"%[\")then ab=h end;assemblies[t*10000+I]={name=h,size=a7,id=I,product=ab,status=a9.status}else local ac=aa..\"_\"..h..\"_\"..I;if a9.status:find(\"JAMMED\")==1 then alerts[ac]={name=h,machine=aa,id=I,status=a9.status}else alerts[ac]=nil end end;if a9.updated==1 then a9.updated=0;dataUpdates[I]=a9 end end;local ad=databank.getKeys()if ad==nil or ad==\"\"then return end;local ae=json.decode(ad)for q,I in ipairs(ae)do processData(I)end;local af={}for ag in pairs(assemblies)do table.insert(af,ag)end;table.sort(af)if B then local f=A.h1 ..A.d1 ..A.t1;f=f..A.r1 ..A.thL..\"&nbsp;\"..A.the..A.thL2 ..\"Assm. - Making\"..A.the..A.thR..\"#&nbsp;\"..A.the..A.thL..\"Status\"..A.the..A.re;for q,ag in ipairs(af)do local ah=assemblies[ag]local a6=y;local ai=ah.status;if ai==\"JAMMED_MISSING_INGREDIENT\"then a6=x;ai=\"WAITING\"elseif ai==\"RUNNING\"then a6=v elseif ai==\"STOPPED\"then a6=w elseif ai:find(\"JAMMED\")==1 then a6=y end;f=f..newHTMLRow(ah.size,ah.product,ah.id..\"&nbsp;\",ai,a6,Font_Size)end;f=f..A.te..A.de;B.setHTML(f)end;local aj={}for ag in pairs(alerts)do table.insert(aj,ag)end;table.sort(aj)if C then local f=A.h1 ..A.d1 ..A.t1;f=f..A.r1 ..A.thL..\"&nbsp;\"..A.the..A.thL2 ..\"Machine\"..A.the..A.thR..\"#\"..A.the..A.thL..\"Alert\"..A.the..A.re;for q,ag in ipairs(aj)do local ak=alerts[ag]local a6=y;local ai=ak.status;if ai==\"JAMMED_MISSING_INGREDIENT\"then a6=x;ai=\"WAITING\"elseif ai:find(\"JAMMED\")==1 then a6=y end;f=f..newHTMLRow(ak.machine,ak.name,ak.id..\"&nbsp;\",ai,a6,Font_Size)end;f=f..A.te..A.de;C.setHTML(f)end end;function refreshScreens(D)refreshContainerDisplay(b[1],b[2],D)refreshIndustryScreens(c[1],c[2],D)end;function processFirst()unit.stopTimer(\"First\")refreshScreens(true)end;function processDataUpdates()if not databank then return end;local al=11;for I,a9 in pairs(dataUpdates)do al=al-1;if al==0 then return end;databank.setStringValue(I,json.encode(a9))dataUpdates[I]=nil end;if next(dataUpdates)==nil then databank.setIntValue(\"updated\",0)end end;function processTick()local am,an=xpcall(function()refreshScreens(false)end,traceback)if not am then system.print(an)end end;function onStop()for q,a in pairs(unit)do if slotValid(a)then if a.setHTML then a.clear()end end end end;system.print(\"InDUstry Status\")local databank=nil;onStart()unit.setTimer(\"First\",1)unit.setTimer(\"Live\",7)unit.setTimer(\"WriteData\",3)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"onStop()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"processFirst()","filter":{"args":[{"value":"First"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"processTick()","filter":{"args":[{"value":"Live"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"processDataUpdates()","filter":{"args":[{"value":"WriteData"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}