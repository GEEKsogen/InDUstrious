{"slots":{"0":{"name":"data","type":{"events":[],"methods":[]}},"1":{"name":"core","type":{"events":[],"methods":[]}},"2":{"name":"display1","type":{"events":[],"methods":[]}},"3":{"name":"display2","type":{"events":[],"methods":[]}},"4":{"name":"display3","type":{"events":[],"methods":[]}},"5":{"name":"display4","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--unit.hide()\nsystem.print(\"Industry Status\")\n\nPlayerContainerProficiency = 30 --export Your Container Proficiency bonus in total percent (Skills->Mining and Inventory->Inventory Manager)\nPlayerContainerOptimization = 0 --export Your Container Optimization bonus in total percent (Skills->Mining and Inventory->Stock Control)\nLowLevel = 25 --export At which percent level do you want bars to be drawn in yellow (not red anymore)\nMediumLevel = 50 --export At which percent level do you want bars to be drawn in green (not yellow anymore)\nsearchStringOre = \" Ore\" --export Your identifier for Ore Storage Containers (e.g. \"Bauxite Ore\"). Include the spaces if you change this!\nsearchStringPure = \"Pure \" --export Your identifier for Pure Storage Containers (e.g. \"Pure Aluminium\"). Include the spaces if you change this!\n\n\nfunction slotValid(slot)\n    return slot \n    and type(slot) == \"table\"\n    and type(slot.export) == \"table\"\n    and slot.getElementClass\nend\nlocal displays = {}\nfunction onStart()\n    if display1 then displays[1] = display1 end\n    if display2 then displays[2] = display2 end\n    if display3 then displays[3] = display3 end\n    if display4 then displays[4] = display4 end\n    local displayIndex = 1\n    for slotName, slot in pairs(unit) do\n        if slotValid(slot) then\n            if slot.setHTML then \n                slot.activate()\n                --displays[displayIndex] = slot\n                --displayIndex = displayIndex + 1\n            elseif not databank and slot.getStringValue then\n                databank = slot\n            elseif not core and slot.getConstructId then\n                core = slot\n            end\n        end\n    end    \nend\n \nfunction refreshScreens(force)\n    refreshOreScreens(displays[3], displays[4], force)\n    refreshIndustryScreens(displays[1], displays[2], force)\nend\n\nfunction processTick()   \n    local ok, msg = xpcall(function ()\n\n        refreshScreens(false)\n\n    end, traceback)\n\n    if not ok then\n      system.print(msg)\n    end\nend\n\n   \nfunction onStop()\n    for _, slot in pairs(unit) do\n        if slotValid(slot) then\n            if slot.setHTML then slot.clear() end\n        end\n    end    \nend\n\nfunction round(number,decimals)\n    local power = 10^decimals\n    return math.floor((number/1000) * power) / power\nend\n\nlocal machineSizes = {\"XS\", \" S\", \" M\", \" L\", \"XL\"}\n\nfunction assemblySize(id)\n    local mass = core.getElementMassById(id)\n    local sizeIndex = math.floor(math.log(mass - 90, 10) + 0.1)\n    return sizeIndex, machineSizes[sizeIndex]\nend\n\ndensities = {\n    Bauxite=1.281;\n    Coal=1.35;\n    Quartz=2.65;\n    Hematite=5.04;\n    Chromite=4.54;\n    Malachite=4;\n    Limestone=2.71;\n    Natron=1.55;\n    Petalite=2.41;\n    Garnierite=2.6;\n    Acanthite=7.2;\n    Pyrite=5.01;\n    Cobaltite=6.33;\n    Cryolite=2.95;\n    Kolbeckite=2.37;\n    GoldNuggets=19.3;\n    Rhodonite=3.76;\n    Columbite=5.38;\n    Illmenite=4.55;\n    Vanadinite=6.95;\n\n    Oxygen=1;\n    Hydrogen=0.07;\n    \n    Aluminium=2.7;\n    Carbon=2.27;\n    Silicon=2.33;\n    Iron=7.85;\n    Calcium=1.55;\n    Chromium=7.19;\n    Copper=8.96;\n    Sodium=0.97;\n    Lithium=0.53;\n    Nickel=8.91;\n    Silver=10.49;\n    Sulfur=1.82;\n    Cobalt=8.9;\n    Fluorine=1.7;\n    Gold=19.3;\n    Scandium=2.98;\n    Manganese=7.21;\n    Niobium=8.57;\n    Titanium=4.51;\n    Vanadium=6;\n}\n\ntolColours = {\n    blue=   \"#332288\",\n    cyan=   \"#66CCEE\",\n    green=  \"#228833\",\n    yellow= \"#CCBB44\",\n    red=    \"#EE6677\",\n    purple= \"#AA3377\",\n    grey=   \"#BBBBBB\",\n} -- https://personal.sron.nl/~pault/\n\n\nlocal headerColour  = \"darkslategray\"\n\nlocal goodColour    = tolColours.green\nlocal idleColour    = tolColours.cyan\nlocal neutralColour = tolColours.yellow\nlocal alarmColour   = tolColours.red\n\nlocal font = [[Monaco, monospace]]\n\nlocal H = {\n    h1 = [[<head><style> .bar { text-align: left; vertical-align: top; border-radius: 0 0em 0em 0; } </style></head>]],\n\n    d1 = [[<div class=\"bootstrap\" style=\"text-align:left; vertical-align: text-bottom;\n    display: flex; flex-direction: column; justify-content: flex-end; align-items: flex-end; margin: auto;\">]],\n    de = [[</div>]],\n\n    t1 = [[<table style=\"text-transform: capitalize;Font-Family: ]]..font..[[;  font-size: 4em; table-layout: auto; width: 100vw;\">]],\n    t2 = [[<table style=\"text-transform: capitalize;Font-Family: ]]..font..[[;  font-size: 2.6em; table-layout: auto; width: 100vw;\">]],\n    te = [[</table>]],\n\n    r1 = [[<tr style=\"width:100vw; background-color: ]]..headerColour..[[; color: white;\">]],\n    r2 = [[<tr>]],\n    re = [[</tr>]],\n\n    thL = [[<th style=\"text-align:left;\">]],\n    thR = [[<th style=\"text-align:right;\">]],\n\n    th3 = [[ <th style=\"background-color: ]]..headerColour..[[;\">&nbsp;</th>]],\n    th4 = [[<th colspan=9>&nbsp;</th>]],\n    the = [[</th>]]\n}\n\nfunction refreshOreScreens(displayLow, displayHigh, force)\n    -- Credit to badman74 for initial approach https://github.com/badman74/DU\n    \n    local outputData = {}\n\n    function processSubstanceContainer(id)\n\n        local name = core.getElementNameById(id)\n        if not name then return end\n\n        local substance = nil\n        if string.match(name, searchStringOre) then\n            --system.print(\"Ore container:\"..name)\n            substance = string.gsub(name, searchStringOre, \"\")\n        elseif string.match(name, searchStringPure) then\n            --system.print(\"Pure container:\"..name)\n            substance = string.gsub(name, searchStringPure, \"\")\n        end\n\n        if not substance or substance==\"\" then return end\n\n        local substanceSingleMass = densities[substance]\n        if substanceSingleMass~=nil then\n            local maxHP = core.getElementMaxHitPointsById(id)\n            local containerSelfMass = 0.0\n            local capacity = 0.0\n            if maxHP > 49 and maxHP <= 123 then -- Hub\n            else\n                if maxHP > 123 and maxHP <= 998 then -- XS\n                    containerSelfMass = 229.09\n                    containerVolume = 1000.0\n                elseif maxHP > 998 and maxHP <= 7996 then -- S\n                    containerSelfMass = 1280.0\n                    containerVolume = 8000.0\n                elseif maxHP > 7996 and maxHP <= 17315 then -- M\n                    containerSelfMass = 7420.0\n                    containerVolume = 64000.0\n                elseif maxHP > 17315 then -- L\n                    containerSelfMass = 14840.0\n                    containerVolume = 128000.0\n                end\n                capacity = containerVolume*(1.0 + PlayerContainerProficiency/100)\n            end\n\n            local contentMass = (core.getElementMassById(id) - containerSelfMass) * (1.0 + PlayerContainerOptimization/100)\n            local volume = contentMass/substanceSingleMass\n\n            if volume>capacity then\n                system.print(name..\" [\"..id..\"] : \"..volume..\" \".. capacity)\n                system.print(\"containerSelfMass : \"..containerSelfMass)\n                system.print(\"contentMass : \"..contentMass)\n                system.print(\"substanceSingleMass : \"..substanceSingleMass)\n            end\n\n            if outputData[substance] then\n                outputData[substance].volume   = outputData[substance].volume   + volume;\n                outputData[substance].capacity = outputData[substance].capacity + capacity;\n            else\n                outputData[substance] = {\n                    name = substance;\n                    volume = volume;\n                    capacity = capacity;\n                }\n            end\n        end\n    end\n\n    local elementsIds = core.getElementIdList()\n    for _,id in ipairs(elementsIds) do\n        if string.match(core.getElementTypeById(id):lower(), \"container\") then\n            processSubstanceContainer(id)\n        end\n    end\n\n    function BarGraph(percent, colspan)\n        if not colspan then colspan = 1 end\n        if percent <= 0 then barcolour = alarmColour\n        elseif percent > 0 and percent <= LowLevel then barcolour = alarmColour\n        elseif percent > LowLevel and percent <= MediumLevel then barcolour = neutralColour\n        elseif percent > MediumLevel then  barcolour = goodColour\n        else  barcolour = goodColour\n        end \n        return [[<td class=\"bar\" valign=top colspan=\"]]..colspan..[[\">\n        <svg>\n            <rect x=\"0\" y=\"1\" rx=\"4\" ry=\"4\" height=\"2.5vw\" width=\"17.2vw\" stroke=\"white\" stroke-width=\"1\" rx=\"0\" />\n            <rect x=\"1\" y=\"2\" rx=\"3\" ry=\"3\" height=\"2.4vw\" width=\"]].. (17*percent/100) ..[[vw\" fill=\"]] .. barcolour ..[[\" opacity=\"1.0\" rx=\"0\" />\n            <text x=\"1\" y=\"23\" fill=\"white\" text-align=\"left\" margin-left=\"3\" font-family=\"]]..font..[[\">]].. string.format(\"%02.1f\", percent) ..[[%</text>\n        </svg>\n        </td>]]        \n    end\n\n    function displayFormat(id)\n        if not outputData[id] then return \"?\", 0, \"kâ„“\" end\n\n        local volume = outputData[id].volume\n        --system.print(id..\" volume=\"..volume)\n        local percent = math.min(100.0 * volume / outputData[id].capacity, 100.0) -- densities are not accurate anough\n\n        if volume >= 1000000 then return string.format(\"%02.1f\", volume/1000000), percent, \"Mâ„“\" end\n        return string.format(\"%02.1f\", volume/1000), percent, \"kâ„“\"\n    end\n\n    function AddHTMLRow(id1, id2)\n        local volume1, percent1, units1 = displayFormat(id1)\n        --system.print(id1..\" volume=\"..volume1..\" units=\"..units1..\" percent=\"..percent1)\n        local volume2, percent2, units2 = displayFormat(id2)\n        --system.print(id2..\" volume=\"..volume2..\" units=\"..units2..\" percent=\"..percent2)\n        resHTML = H.r2 \n            ..H.thL..id1..H.the\n            ..H.thR..volume1..units1..\"&nbsp;\"..H.the\n            ..BarGraph(percent1)\n            ..\"<th style=\\\"background-color: \"..headerColour..\"\\\">\"..H.the\n            ..H.thR..id2..H.the\n            ..H.thR..volume2..units2..\"&nbsp;\"..H.the\n            ..BarGraph(percent2)\n            ..H.re\n        return resHTML\n    end\n\n    local th1 = [[<th style=\"width:17vw; text-align:left;\">]]\n    local th2 = [[<th style=\"width:14vw; text-align:left;\">Vol.</th>\n                  <th style=\"width:17vw; text-align:left;\">Levels</th>]]\n    \n    function AddHTMLHeader(text1, text2)\n        return H.r1..th1..text1..H.the..th2..[[<th style=\"width:2vw\"/>]]..th1..text2..H.the..th2\n    end\n    \n    if displayLow then\n        local html=H.h1..H.d1..H.t2\n\n        html=html..AddHTMLHeader(\"T3 Ores\", \"T3 Pures\")\n        html=html..AddHTMLRow(\"Petalite\", \"Lithium\")\n        html=html..AddHTMLRow(\"Garnierite\", \"Nickel\")\n        html=html..AddHTMLRow(\"Pyrite\", \"Sulfur\")\n        html=html..AddHTMLRow(\"Acanthite\", \"Silver\")\n\n        html=html..AddHTMLHeader(\"T2 Ores\", \"T2 Pures\")\n        html=html..AddHTMLRow(\"Natron\", \"Sodium\")\n        html=html..AddHTMLRow(\"Malachite\", \"Copper\")\n        html=html..AddHTMLRow(\"Limestone\", \"Calcium\")\n        html=html..AddHTMLRow(\"Chromite\", \"Chromium\")\n        \n        html=html..AddHTMLHeader(\"T1 Ores\", \"T1 Pures\")\n        html=html..AddHTMLRow(\"Bauxite\", \"Aluminium\")\n        html=html..AddHTMLRow(\"Coal\", \"Carbon\")\n        html=html..AddHTMLRow(\"Hematite\", \"Iron\")\n        html=html..AddHTMLRow(\"Quartz\", \"Silicon\")\n\n        html=html..AddHTMLHeader(\"Hâ‚‚\", \"Oâ‚‚\")\n        html=html..AddHTMLRow(\"Hydrogen\", \"Oxygen\")\n\n        --if oresIn then\n            --system.print(\"Ore IN mass=\"..oresIn.getMass())\n            --local oresInPercent = 100000 * outputdatabank.IN.amount * 1000 / outputdatabank.IN.capacity\n            --html=html..\"<tr><th align=right>Ores IN</th>\"..BarGraph(oresInPercent,7)..\"</tr>\"\n        --end\n        \n        html=html..H.r1..H.th4..H.re\n        html=html..H.te..H.de\n        displayLow.setHTML(html)\n    end\n\n    if displayHigh then\n        local html=H.h1..H.d1..H.t2\n\n        html=html..AddHTMLHeader(\"T5 Ores\", \"T5 Pures\")\n        html=html..AddHTMLRow(\"Rhodonite\", \"Manganese\")\n        html=html..AddHTMLRow(\"Columbite\", \"Niobium\")\n        html=html..AddHTMLRow(\"Illmenite\", \"Titanium\")\n        html=html..AddHTMLRow(\"Vanadinite\", \"Vanadium\")\n\n        html=html..AddHTMLHeader(\"T4 Ores\", \"T4 Pures\")\n        html=html..AddHTMLRow(\"Cobaltite\", \"Cobalt\")\n        html=html..AddHTMLRow(\"Cryolite\", \"Fluorine\")\n        html=html..AddHTMLRow(\"GoldNuggets\", \"Gold\")\n        html=html..AddHTMLRow(\"Kolbeckite\", \"Scandium\")\n\n        html=html..H.r1..H.th4..H.re\n        html=html..H.te..H.de\n        displayHigh.setHTML(html)\n    end\n\nend\n\n\nfunction refreshIndustryScreens(displayLow, displayHigh, force)\n    if not force and databank.hasKey(\"updated\") and databank.getIntValue(\"updated\")==0 then return end\n\n    function AddHTMLRow(text1, text2, text3, colour, size)\n        resHTML =\n            [[<tr style=\"color: ]]..colour..[[; font-size: ]]..size..[[em;\">>\n                ]]..H.thL..[[&nbsp;</th>\n                ]]..H.thL..text1..[[</th>\n                ]]..H.thR..text2..[[&nbsp;</th>\n                ]]..H.thL..text3..[[</th>\n            </tr>]]\n        return resHTML\n    end\n\n    local assemblies = {}\n    local alerts = {}\n    local keys = json.decode(databank.getKeys())\n    for _,key in ipairs(keys) do\n        if key ~= \"updated\" then\n            local info = json.decode(databank.getStringValue(key))\n            if (data and type(info) == \"table\" and info.status and (force or info.updated==1)) then\n                --system.print(key..\" status=\"..info.status)\n                local name = core.getElementNameById(key)\n                local machine = core.getElementTypeById(key)\n                if (machine==\"assembly line\") then\n                    local sizeIndex, size = assemblySize(key)\n                    --system.print(key..\" Assembly \"..assemblySize(key)..\" : \"..info.status)\n                    assemblies[sizeIndex * 10000 + key] = {name=name, size=size, id=key, status=info.status}\n                else\n                    --system.print(key..\" : \"..machine..\"[\"..name..\"] : \"..info.status)\n                    if info.status:find(\"JAMMED\") == 1 then       \n                        --system.print(key..\" : \"..machine..\"[\"..name..\"] : \"..info.status)\n                        alerts[key] = {name=name, machine=machine, id=key, status=info.status}\n                    end\n                end\n                info.updated = 0\n            end        \n        end\n    end\n\n    -- Sort the assemblies by size\n    local tkeys = {}\n    for k in pairs(assemblies) do table.insert(tkeys, k) end\n    table.sort(tkeys)\n\n    if displayLow then\n        local html=H.h1..H.d1..H.t1\n\n        html=html..H.r1..H.thL..\"&nbsp;\"..H.the..H.thL..\"Assembly Lines\"..H.the..H.thR..\"#&nbsp;\"..H.the..H.thL..\"Status\"..H.the..H.re\n\n        for _, k in ipairs(tkeys) do\n            local assembly = assemblies[k]\n            local colour = alarmColour\n            local status = assembly.status\n            if status == \"JAMMED_MISSING_INGREDIENT\" then       \n                colour = neutralColour\n                status = \"WAITING\"\n            elseif status == \"RUNNING\" then       \n                colour = goodColour\n            elseif status == \"STOPPED\" then       \n                colour = idleColour\n            elseif status:find(\"JAMMED\") == 1 then       \n                colour = alarmColour\n            end\n            --system.print(assembly.size..\" [\"..assembly.id..\"] :\"..status.. \" (\"..colour..\")\")\n            html=html..AddHTMLRow(assembly.size, \"\"..assembly.id, status, colour, \"1\")\n        end\n\n        html=html..H.te..H.de\n        displayLow.setHTML(html)\n    end\n\n    if displayHigh then\n        local html=H.h1..H.d1..H.t1\n\n        html=html..H.r1..H.thL..\"&nbsp;\"..H.the..H.thL..\"Machine\"..H.the..H.thR..\"#&nbsp;\"..H.the..H.thL..\"Alert\"..H.the..H.re\n\n        for _, alert in pairs(alerts) do\n            local colour = alarmColour\n            local status = alert.status\n            if status == \"JAMMED_MISSING_INGREDIENT\" then       \n                colour = neutralColour\n                status = \"WAITING\"\n            elseif status:find(\"JAMMED\") == 1 then       \n                colour = alarmColour\n            end\n            html=html..AddHTMLRow(alert.machine..\" - \"..alert.name, \"\"..alert.id, status, colour, \"0.5\")\n        end\n\n        html=html..H.te..H.de\n        displayHigh.setHTML(html)\n    end\n\n\n    databank.setIntValue(\"updated\", 0)\nend\n\n\nfunction queryAllElements()\n\n    elementsIds = core.getElementIdList()\n\n    for _,id in ipairs(elementsIds) do    \n        system.print(id..\" : \"..core.getElementTypeById(id)..\" name=\"..core.getElementNameById(id))      \n    end\n    \nend\n\nfunction queryAllKeys()\n    system.print(\"Query all keys in databank...\")\n    local keys = json.decode(databank.getKeys())\n    for _,key in ipairs(keys) do\n        system.print(key..\"=\"..databank.getStringValue(key))    \n    end  \nend\n\nlocal databank = nil\nonStart()\n--queryAllKeys()\n--queryAllElements()\n\nrefreshScreens(true)\nunit.setTimer(\"Live\", 10)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"processTick()","filter":{"args":[{"value":"Live"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"onStop()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"2"}],"methods":[],"events":[]}