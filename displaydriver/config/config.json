{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"PlayerContainerProficiency = 30 --export Your Container Proficiency bonus in total percent (Skills->Mining and Inventory->Inventory Manager)\r\nPlayerContainerOptimization = 0 --export Your Container Optimization bonus in total percent (Skills->Mining and Inventory->Stock Control)\r\nLowLevel = 25 --export Percent for low level indicator\r\nHighLevel = 50 --export Percent for high level indicator\r\nContainerMatch = \"C_(.+)\" --export Match for single item Storage Container names (e.g. \"C_Hematite\")\r\nOverflowMatch = \"O_(.+)\" --export Match for single item Overflow Container names (e.g. \"O_Hydrogen\")\r\nUS_Spellings = false --export Expect American spellings\r\nproperties={Bauxite={density=1.281,ore=true},Coal={density=1.35,ore=true},Quartz={density=2.65,ore=true},Hematite={density=5.04,ore=true},Chromite={density=4.54,ore=true},Malachite={density=4.00,ore=true},Limestone={density=2.71,ore=true},Natron={density=1.55,ore=true},Petalite={density=2.41,ore=true},Garnierite={density=2.6,ore=true},Acanthite={density=7.2,ore=true},Pyrite={density=5.01,ore=true},Cobaltite={density=6.33,ore=true},Cryolite={density=2.95,ore=true},Kolbeckite={density=2.37,ore=true},GoldNuggets={density=19.3,ore=true},Rhodonite={density=3.76,ore=true},Columbite={density=5.38,ore=true},Illmenite={density=4.55,ore=true},Vanadinite={density=6.95,ore=true},Hydrogen={density=0.069785,short=\"H₂\"},Oxygen={density=1.0000,short=\"O₂\"},Aluminium={density=2.7,usSpelling=\"Aluminum\"},Carbon={density=2.27},Silicon={density=2.33},Iron={density=7.85},Calcium={density=1.55},Chromium={density=7.19},Copper={density=8.96},Sodium={density=0.97},Lithium={density=0.53},Nickel={density=8.91},Silver={density=10.49},Sulfur={density=1.82},Cobalt={density=8.9},Fluorine={density=1.7},Gold={density=19.3},Scandium={density=2.98},Manganese={density=7.21},Niobium={density=8.57},Titanium={density=4.51},Vanadium={density=6.00},Silumin={density=3.00},Steel={density=8.05},AlFe={density=7.50},AlLi={density=2.50},CaRefCu={density=8.10},CuAg={density=9.20},Duralumin={density=2.80}}function slotValid(a)return a and type(a)==\"table\"and type(a.export)==\"table\"and a.getElementClass end;local b={}local c={}local d={}function onStart()for e,a in pairs(unit)do if slotValid(a)then if a.setHTML then local f=[[<div style=\"width:100vw\"><div style=\"margin-top: 10px;padding: 0px;width: 100vw;display: inline-block;\">Hamsters wake up ...</div></div>]]a.activate()a.setHTML(f)elseif not databank and a.getStringValue then databank=a elseif not core and a.getConstructId then core=a end end end;if not core then return end;for e,a in pairs(unit)do if slotValid(a)then if a.setHTML then local g=a.getId()if g then local h=core.getElementNameById(g)if h==\"ContDisplay1\"then b[1]=a elseif h==\"ContDisplay2\"then b[2]=a elseif h==\"ProdDisplay1\"then c[1]=a elseif h==\"ProdDisplay2\"then c[2]=a end end end end end;function extractSubstanceName(h,i)local j=string.gsub(h,i,\"\")return j end;function getBaseCointainerProperties(g)local k=core.getElementMaxHitPointsById(g)if k<=123 then return 0.0,0.0 elseif k<=998 then return 229.09,1000.0 elseif k<=7996 then return 1281.31,8000.0 elseif k<=17315 then return 7421.35,64000.0 else return 14842.7,128000.0 end end;function addContainer(g)if not core.getElementTypeById(g)==\"container\"then return end;local h=core.getElementNameById(g)if not h then return end;local l=false;local j=string.match(h,\"^\"..ContainerMatch)if not j then j=string.match(h,\"^\"..OverflowMatch)if not j then return end;l=true end;local m=properties[j]if not m then return end;local n,o=getBaseCointainerProperties(g)capacity=o*(1.0+PlayerContainerProficiency/100)d[g]={name=h,id=g,substance=j,capacity=capacity,selfMass=n,property=m,overflow=l}end;local elementsIds=core.getElementIdList()for p,g in ipairs(elementsIds)do addContainer(g)end end;local q={\"XS\",\" S\",\" M\",\" L\",\"XL\"}function assemblySize(g)local r=core.getElementMassById(g)local s=math.floor(math.log(r-90,10)+0.1)return s,q[s]end;tolColours={blue=\"#332288\",cyan=\"#66CCEE\",green=\"#228833\",yellow=\"#CCBB44\",red=\"#EE6677\",purple=\"#AA3377\",grey=\"#BBBBBB\"}local t=\"darkslategray\"local u=tolColours.green;local v=tolColours.cyan;local w=tolColours.yellow;local x=tolColours.red;local y=[[monospace]]local z={h1=[[<head><style> .bar { text-align: left; vertical-align: top; border-radius: 0 0em 0em 0; } </style></head>]],d1=[[<div class=\"bootstrap\" style=\"text-transform:none; text-align:left; vertical-align: text-bottom;\r\n    display: flex; flex-direction: column; justify-content: flex-end; align-items: flex-end; margin: auto;\">]],de=[[</div>]],t1=[[<table style=\"Font-Family: ]]..y..[[;  font-size: 4em; table-layout: auto; width: 100vw;\">]],t2=[[<table style=\"Font-Family: ]]..y..[[;  font-size: 2.6em; table-layout: auto; width: 100vw;\">]],te=[[</table>]],r1=[[<tr style=\"width:100vw; background-color: ]]..t..[[; color: white;\">]],r2=[[<tr>]],re=[[</tr>]],thL=[[<th style=\"text-align:left; margin-left:20px\">]],thL2=[[<th style=\"text-align:left; margin-left:20px\" colspan=\"2\">]],thR=[[<th style=\"text-align:right; margin-right:20px\">]],th3=[[<th style=\"background-color: ]]..t..[[;\">&nbsp;</th>]],th4=[[<th colspan=9>&nbsp;</th>]],the=[[</th>]]}function refreshContainerDisplay(A,B,C)local D={}function processSubstanceContainer(E)local F=(core.getElementMassById(E.id)-E.selfMass)*(1.0+PlayerContainerOptimization/100)local G=F/E.property.density;if G-E.capacity>.5 then system.print(E.name..\" [\"..E.id..\"] : volume > capacity\")system.print(G..\" > \"..E.capacity)system.print(\"Density : \"..E.property.density..\" => \"..string.format(\"%0.6f\",F/E.capacity))end;local H=E.substance;if E.overflow then H=\"O_\"..E.substance end;if D[H]then D[H].volume=D[H].volume+G;D[H].capacity=D[H].capacity+E.capacity else D[H]={substance=E.substance,volume=G,capacity=E.capacity,overflow=E.overflow}end end;for p,E in pairs(d)do processSubstanceContainer(E)end;function statusColour(I,J)if J then I=100.0-I end;if I<=LowLevel then return x end;if I<=HighLevel then return w end;return u end;function barGraph(I,J,K)if not K then K=1 end;local L=statusColour(I,J)return[[<td class=\"bar\" valign=top colspan=\"]]..K..[[\">\r\n        <svg>\r\n            <rect x=\"0\" y=\"1\" rx=\"4\" ry=\"4\" height=\"2.5vw\" width=\"17.2vw\" stroke=\"white\" stroke-width=\"1\" rx=\"0\" />\r\n            <rect x=\"1\" y=\"2\" rx=\"3\" ry=\"3\" height=\"2.4vw\" width=\"]]..17*I/100 ..[[vw\" fill=\"]]..L..[[\" opacity=\"1.0\" rx=\"0\" />\r\n            <text x=\"1\" y=\"23\" fill=\"white\" text-align=\"left\" margin-left=\"3\" font-family=\"]]..y..[[\">]]..string.format(\"%02.1f\",I)..[[%</text>\r\n        </svg>\r\n        </td>]]end;function correctSpelling(M)if US_Spellings and properties[M]and properties[M].usSpelling then return properties[M].usSpelling end;return M end;function displayFormat(j,l)local M=correctSpelling(j)local H=j;if l then H=\"O_\"..j end;local N=D[H]if not N then if l then return nil end;return\"?\",0.0,\"kℓ\",M end;if l then local O=properties[j].short;if O then M=O..\" Overflow\"else M=j..\" OF\"end end;local G=N.volume;local I=math.min(100.0*G/N.capacity,100.0)if G>=1000000 then return string.format(\"%02.1f\",G/1000000),I,\"Mℓ\",M end;return string.format(\"%02.1f\",G/1000),I,\"kℓ\",M end;function newHTMLRow(P,Q,l)local R,S,T,U=displayFormat(P,l)if not R then return\"\"end;local V,W,X,Y=displayFormat(Q,l)local Z=\"⇒\"if l or not D[P]or not D[P].ore then Z=\"&nbsp;\"end;resHTML=z.r2 ..z.thL..U..z.the..z.thR..R..T..z.the..barGraph(S,l)..\"<th style=\\\"background-color: \"..t..\"\\\">\"..Z..z.the..z.thL..Y..z.the..z.thR..V..X..z.the..barGraph(W,l)..z.re;return resHTML end;local _=[[<th style=\"width:18vw; text-align:left;\">]]local a0=[[<th style=\"width:13vw; text-align:left;\"></th>\r\n                  <th style=\"width:17vw; text-align:left;\"></th>]]function newHTMLHeader(U,Y)return z.r1 .._..U..z.the..a0 ..[[<th style=\"width:2vw\"/>]].._..Y..z.the..a0 end;if A then local f=z.h1 ..z.d1 ..z.t2;f=f..newHTMLHeader(\"T3 Ores\",\"T3 Pures\")f=f..newHTMLRow(\"Petalite\",\"Lithium\")f=f..newHTMLRow(\"Garnierite\",\"Nickel\")f=f..newHTMLRow(\"Pyrite\",\"Sulfur\")f=f..newHTMLRow(\"Acanthite\",\"Silver\")f=f..newHTMLHeader(\"T2 Ores\",\"T2 Pures\")f=f..newHTMLRow(\"Natron\",\"Sodium\")f=f..newHTMLRow(\"Malachite\",\"Copper\")f=f..newHTMLRow(\"Limestone\",\"Calcium\")f=f..newHTMLRow(\"Chromite\",\"Chromium\")f=f..newHTMLHeader(\"T1 Ores\",\"T1 Pures\")f=f..newHTMLRow(\"Bauxite\",\"Aluminium\")f=f..newHTMLRow(\"Coal\",\"Carbon\")f=f..newHTMLRow(\"Hematite\",\"Iron\")f=f..newHTMLRow(\"Quartz\",\"Silicon\")f=f..newHTMLHeader(\"H₂\",\"O₂\")f=f..newHTMLRow(\"Hydrogen\",\"Oxygen\")f=f..newHTMLRow(\"Hydrogen\",\"Oxygen\",true)f=f..z.r1 ..z.th4 ..z.re;f=f..z.te..z.de;A.setHTML(f)end;if B then local f=z.h1 ..z.d1 ..z.t2;f=f..newHTMLHeader(\"T5 Ores\",\"T5 Pures\")f=f..newHTMLRow(\"Rhodonite\",\"Manganese\")f=f..newHTMLRow(\"Columbite\",\"Niobium\")f=f..newHTMLRow(\"Illmenite\",\"Titanium\")f=f..newHTMLRow(\"Vanadinite\",\"Vanadium\")f=f..newHTMLHeader(\"T4 Ores\",\"T4 Pures\")f=f..newHTMLRow(\"Cobaltite\",\"Cobalt\")f=f..newHTMLRow(\"Cryolite\",\"Fluorine\")f=f..newHTMLRow(\"GoldNuggets\",\"Gold\")f=f..newHTMLRow(\"Kolbeckite\",\"Scandium\")f=f..newHTMLHeader(\"Alloys\",\"Alloys\")f=f..newHTMLRow(\"Silumin\",\"Steel\")f=f..newHTMLRow(\"AlFe\",\"CaRefCu\")f=f..z.r1 ..z.th4 ..z.re;f=f..z.te..z.de;B.setHTML(f)end end;dataUpdates={}assemblies={}alerts={}function refreshIndustryScreens(A,B,C)function newHTMLRow(U,Y,a1,a2,a3,a4)resHTML=[[<tr style=\"color: ]]..a3 ..[[; font-size: ]]..a4 ..[[em;\">>\r\n                ]]..z.thL..[[&nbsp;</th>\r\n                ]]..z.thL..U..[[</th>\r\n                ]]..z.thL..Y..[[</th>\r\n                ]]..z.thR..a1 ..[[</th>\r\n                ]]..z.thL..a2 ..[[</th>\r\n            </tr>]]return resHTML end;function processData(H)if H==\"updated\"then return end;local a5=databank.getStringValue(H)if a5==nil or a5==\"\"then return end;local a6=json.decode(a5)if not a6 or type(a6)~=\"table\"or not a6.status or not C and a6.updated~=1 then return end;if not C then system.print(H..\" status=\"..a6.status)end;local h=core.getElementNameById(H)local a7=core.getElementTypeById(H)if a7==\"assembly line\"then local s,a4=assemblySize(H)local a8=\"\"if not string.find(h,\"%[\")then a8=h end;assemblies[s*10000+H]={name=h,size=a4,id=H,product=a8,status=a6.status}else local a9=a7 ..\"_\"..h..\"_\"..H;if a6.status:find(\"JAMMED\")==1 then alerts[a9]={name=h,machine=a7,id=H,status=a6.status}else alerts[a9]=nil end end;if a6.updated==1 then a6.updated=0;dataUpdates[H]=a6 end end;local aa=databank.getKeys()if aa==nil or aa==\"\"then return end;local ab=json.decode(aa)for p,H in ipairs(ab)do processData(H)end;local ac={}for ad in pairs(assemblies)do table.insert(ac,ad)end;table.sort(ac)if A then local f=z.h1 ..z.d1 ..z.t1;f=f..z.r1 ..z.thL..\"&nbsp;\"..z.the..z.thL2 ..\"Assm. - Making\"..z.the..z.thR..\"#&nbsp;\"..z.the..z.thL..\"Status\"..z.the..z.re;for p,ad in ipairs(ac)do local ae=assemblies[ad]local a3=x;local af=ae.status;if af==\"JAMMED_MISSING_INGREDIENT\"then a3=w;af=\"WAITING\"elseif af==\"RUNNING\"then a3=u elseif af==\"STOPPED\"then a3=v elseif af:find(\"JAMMED\")==1 then a3=x end;f=f..newHTMLRow(ae.size,ae.product,ae.id..\"&nbsp;\",af,a3,\"1\")end;f=f..z.te..z.de;A.setHTML(f)end;local ag={}for ad in pairs(alerts)do table.insert(ag,ad)end;table.sort(ag)if B then local f=z.h1 ..z.d1 ..z.t1;f=f..z.r1 ..z.thL..\"&nbsp;\"..z.the..z.thL2 ..\"Machine\"..z.the..z.thR..\"#\"..z.the..z.thL..\"Alert\"..z.the..z.re;for p,ad in ipairs(ag)do local ah=alerts[ad]local a3=x;local af=ah.status;if af==\"JAMMED_MISSING_INGREDIENT\"then a3=w;af=\"WAITING\"elseif af:find(\"JAMMED\")==1 then a3=x end;f=f..newHTMLRow(ah.machine,ah.name,ah.id..\"&nbsp;\",af,a3,\"0.5\")end;f=f..z.te..z.de;B.setHTML(f)end end;function queryAllElements()elementsIds=core.getElementIdList()for p,g in ipairs(elementsIds)do system.print(g..\" : \"..core.getElementTypeById(g)..\" name=\"..core.getElementNameById(g))end end;function refreshScreens(C)refreshContainerDisplay(b[1],b[2],C)refreshIndustryScreens(c[1],c[2],C)end;function processFirst()system.print(\"Tick First\")unit.stopTimer(\"First\")refreshScreens(true)end;function processDataUpdates()if not databank then return end;local ai=11;for H,a6 in pairs(dataUpdates)do ai=ai-1;if ai==0 then return end;system.print(\"Writing data for \"..H)databank.setStringValue(H,json.encode(a6))dataUpdates[H]=nil end;if next(dataUpdates)==nil then databank.setIntValue(\"updated\",0)end end;function processTick()local aj,ak=xpcall(function()refreshScreens(false)end,traceback)if not aj then system.print(ak)end end;function onStop()for p,a in pairs(unit)do if slotValid(a)then if a.setHTML then a.clear()end end end end;system.print(\"InDUstry Status\")local databank=nil;onStart()unit.setTimer(\"First\",1)unit.setTimer(\"Live\",7)unit.setTimer(\"WriteData\",3)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"onStop()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"processFirst()","filter":{"args":[{"value":"First"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"processTick()","filter":{"args":[{"value":"Live"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"processDataUpdates()","filter":{"args":[{"value":"WriteData"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}