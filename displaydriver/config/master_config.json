{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"PlayerContainerProficiency=30;PlayerContainerOptimization=0;LowLevel=25;HighLevel=50;ContainerMatch=\"C_(.+)\"OverflowMatch=\"O_(.+)\"FontSize=0.8;DataThrottle=25;US_Spellings=false;debugId=853;function debug(a,b)if a~=debugId then return end;system.print(\"MAS#\"..self.getId()..\" \"..b)end;properties={Bauxite={density=1.2808,ore=true},Coal={density=1.3465,ore=true},Quartz={density=2.6498,ore=true},Hematite={density=5.0398,ore=true},Chromite={density=4.54,ore=true},Malachite={density=3.9997,ore=true},Limestone={density=2.7105,ore=true},Natron={density=1.5499,ore=true},Petalite={density=2.4119,ore=true},Garnierite={density=2.6,ore=true},Acanthite={density=7.1995,ore=true},Pyrite={density=5.0098,ore=true},Cobaltite={density=6.33,ore=true},Cryolite={density=2.9495,ore=true},Kolbeckite={density=2.37,ore=true},GoldNuggets={density=19.3,ore=true},Rhodonite={density=3.76,ore=true},Columbite={density=5.38,ore=true},Illmenite={density=4.55,ore=true},Vanadinite={density=6.95,ore=true},Hydrogen={density=0.069785,short=\"H₂\"},Oxygen={density=1.0000,short=\"O₂\"},Aluminium={density=2.7,short=\"Al\",usSpelling=\"Aluminum\"},Carbon={density=2.27,short=\"C\"},Silicon={density=2.33,short=\"Si\"},Iron={density=7.85,short=\"Fe\"},Calcium={density=1.55,short=\"Ca\"},Chromium={density=7.19,short=\"Cr\"},Copper={density=8.96,short=\"Cu\"},Sodium={density=0.97,short=\"Na\"},Lithium={density=0.53,short=\"Li\"},Nickel={density=8.91,short=\"Ni\"},Silver={density=10.49,short=\"Ag\"},Sulfur={density=1.82,short=\"S\"},Cobalt={density=8.9,short=\"Co\"},Fluorine={density=1.7,short=\"Fl\"},Gold={density=19.3,short=\"Au\"},Scandium={density=2.98,short=\"Sc\"},Manganese={density=7.21,short=\"Mn\"},Niobium={density=8.57,short=\"Ni\"},Titanium={density=4.51,short=\"Ti\"},Vanadium={density=6.00,short=\"Va\"},Silumin={density=3.00},Steel={density=8.05},AlFe={density=7.50},AlLi={density=2.50},CaRefCu={density=8.10},CuAg={density=9.20},Duralumin={density=2.80},[\"Stainless steel\"]={density=7.75,short=\"S.Steel\"}}function slotValid(c)return c and type(c)==\"table\"and type(c.export)==\"table\"and c.getElementClass end;local d={}local e={}local f={}function onStart()for g,c in pairs(unit)do if slotValid(c)then if c.setHTML then local h=[[<div style=\"width:100vw\"><div style=\"margin-top: 10px;padding: 0px;width: 100vw;display: inline-block;\">Hamsters wake up ...</div></div>]]c.activate()c.setHTML(h)elseif not databank and c.getStringValue then databank=c;databank.setIntValue(\"master\",1)if debugId>0 then databank.setIntValue(\"debugId\",debugId)end elseif not core and c.getConstructId then core=c end end end;if not core then return end;for g,c in pairs(unit)do if slotValid(c)then if c.setHTML then local a=c.getId()if a then local i=core.getElementNameById(a)if i==\"ContDisplay1\"then d[1]=c elseif i==\"ContDisplay2\"then d[2]=c elseif i==\"ProdDisplay1\"then e[1]=c elseif i==\"ProdDisplay2\"then e[2]=c end end end end end;function extractSubstanceName(i,j)local k=string.gsub(i,j,\"\")return k end;function getBaseCointainerProperties(a)local l=core.getElementMaxHitPointsById(a)if l<=123 then return 0.0,0.0 elseif l<=998 then return 229.09,1000.0 elseif l<=7996 then return 1281.31,8000.0 elseif l<=17315 then return 7421.35,64000.0 else return 14842.7,128000.0 end end;function addContainer(a)if not core.getElementTypeById(a)==\"container\"then return end;local i=core.getElementNameById(a)if not i then return end;local m=false;local k=string.match(i,\"^\"..ContainerMatch)if not k then k=string.match(i,\"^\"..OverflowMatch)if not k then return end;m=true end;local n=properties[k]if not n then return end;local o,p=getBaseCointainerProperties(a)capacity=p*(1.0+PlayerContainerProficiency/100)f[a]={name=i,id=a,substance=k,capacity=capacity,selfMass=o,property=n,overflow=m,isHub=p==0}end;local q=core.getElementIdList()for r,a in ipairs(q)do addContainer(a)end end;local s={\"XS\",\" S\",\" M\",\" L\",\"XL\"}function assemblySize(a)local t=core.getElementMassById(a)local u=math.floor(math.log(t-90,10)+0.1)return u,s[u]end;tolColours={blue=\"#332288\",cyan=\"#66CCEE\",green=\"#228833\",yellow=\"#CCBB44\",red=\"#EE6677\",purple=\"#AA3377\",grey=\"#BBBBBB\"}local v=\"darkslategray\"local w=tolColours.green;local x=tolColours.cyan;local y=tolColours.yellow;local z=tolColours.red;local A=[[monospace]]local B={h1=[[<head><style> .bar { text-align: left; vertical-align: top; border-radius: 0 0em 0em 0; } </style></head>]],d1=[[<div class=\"bootstrap\" style=\"text-transform:none; text-align:left; vertical-align: text-bottom;\r\ndisplay: flex; flex-direction: column; justify-content: flex-end; align-items: flex-end; margin: auto;\">]],de=[[</div>]],t1=[[<table style=\"Font-Family: ]]..A..[[;  font-size: 4em; table-layout: auto; width: 100vw;\">]],t2=[[<table style=\"Font-Family: ]]..A..[[;  font-size: 2.6em; table-layout: auto; width: 100vw;\">]],te=[[</table>]],r1=[[<tr style=\"width:100vw; background-color: ]]..v..[[; color: white;\">]],r2=[[<tr>]],re=[[</tr>]],thL=[[<th style=\"text-align:left; margin-left:20px\">]],thL2=[[<th style=\"text-align:left; margin-left:20px\" colspan=\"2\">]],thR=[[<th style=\"text-align:right; margin-right:20px\">]],th3=[[<th style=\"background-color: ]]..v..[[;\">&nbsp;</th>]],th4=[[<th colspan=9>&nbsp;</th>]],the=[[</th>]],nbr=[[<nobr>]],nbre=[[</nobr>]]}function refreshContainerDisplay(C,D,E)local F={}function processSubstanceContainer(G)local H=(core.getElementMassById(G.id)-G.selfMass)*(1.0+PlayerContainerOptimization/100)local I=H/G.property.density;local J=G.substance;if G.overflow then J=\"O_\"..G.substance end;if F[J]then F[J].volume=F[J].volume+I;F[J].contentMass=F[J].contentMass+H;F[J].capacity=F[J].capacity+G.capacity else F[J]={substance=G.substance,volume=I,contentMass=H,capacity=G.capacity,overflow=G.overflow}end end;for r,G in pairs(f)do processSubstanceContainer(G)end;function statusColour(K,L)if L then K=100.0-K end;if K<=LowLevel then return z end;if K<=HighLevel then return y end;return w end;function barGraph(K,L,M)if not M then M=1 end;local N=statusColour(K,L)return[[<td class=\"bar\" valign=top colspan=\"]]..M..[[\">\r\n<svg>\r\n    <rect x=\"0\" y=\"1\" rx=\"4\" ry=\"4\" height=\"2.5vw\" width=\"17.2vw\" stroke=\"white\" stroke-width=\"1\" rx=\"0\" />\r\n    <rect x=\"1\" y=\"2\" rx=\"3\" ry=\"3\" height=\"2.4vw\" width=\"]]..17*K/100 ..[[vw\" fill=\"]]..N..[[\" opacity=\"1.0\" rx=\"0\" />\r\n    <text x=\"1\" y=\"23\" fill=\"white\" text-align=\"left\" margin-left=\"3\" font-family=\"]]..A..[[\">]]..string.format(\"%02.1f\",K)..[[%</text>\r\n</svg>\r\n</td>]]end;function correctSpelling(b)if US_Spellings and properties[b]and properties[b].usSpelling then return properties[b].usSpelling end;return b end;function displayFormat(k,m)local b=correctSpelling(k)local J=k;if m then J=\"O_\"..k end;local O=F[J]if not O then if m then return nil end;return\"?\",0.0,\"kℓ\",b end;local P=properties[k].short;if m then if P then b=P..\" Overflow\"else b=b..\" OF\"end elseif b:len()>12 and P then b=P end;local I=O.volume;local K=math.min(100.0*I/O.capacity,100.0)if I>=1000000 then return string.format(\"%02.1f\",I/1000000),K,\"Mℓ\",b end;return string.format(\"%02.1f\",I/1000),K,\"kℓ\",b end;function cell(Q,R)return[[<th style=\"width:]]..Q..[[vw; text-align:]]..R..[[;\">]]end;function newHTMLRow(S,T,m)local U,V,W,X=displayFormat(S,m)if not U then return\"\"end;local Y,Z,_,a0=displayFormat(T,m)local a1=\"⇒\"if m or not F[S]or not F[S].ore then a1=\"&nbsp;\"end;resHTML=B.r2 ..B.thL..B.nbr..X..B.nbre..B.the..B.thR..U..W..B.the..barGraph(V,m)..\"<th style=\\\"background-color: \"..v..\"\\\">\"..a1 ..B.the..B.thL..B.nbr..a0 ..B.nbre..B.the..B.thR..Y.._..B.the..barGraph(Z,m)..B.re;return resHTML end;local a2=[[<th style=\"width:18vw; text-align:left;\">]]local a3=[[<th style=\"width:13vw; text-align:left;\"></th>\r\n<th style=\"width:17vw; text-align:left;\"></th>]]function newHTMLHeader(X,a0)return B.r1 ..a2 ..X..B.the..a3 ..[[<th style=\"width:2vw\"/>]]..a2 ..a0 ..B.the..a3 end;if C then local h=B.h1 ..B.d1 ..B.t2;h=h..newHTMLHeader(\"T3 Ores\",\"T3 Pures\")h=h..newHTMLRow(\"Petalite\",\"Lithium\")h=h..newHTMLRow(\"Garnierite\",\"Nickel\")h=h..newHTMLRow(\"Pyrite\",\"Sulfur\")h=h..newHTMLRow(\"Acanthite\",\"Silver\")h=h..newHTMLHeader(\"T2 Ores\",\"T2 Pures\")h=h..newHTMLRow(\"Natron\",\"Sodium\")h=h..newHTMLRow(\"Malachite\",\"Copper\")h=h..newHTMLRow(\"Limestone\",\"Calcium\")h=h..newHTMLRow(\"Chromite\",\"Chromium\")h=h..newHTMLHeader(\"T1 Ores\",\"T1 Pures\")h=h..newHTMLRow(\"Bauxite\",\"Aluminium\")h=h..newHTMLRow(\"Coal\",\"Carbon\")h=h..newHTMLRow(\"Hematite\",\"Iron\")h=h..newHTMLRow(\"Quartz\",\"Silicon\")h=h..newHTMLHeader(\"H₂\",\"O₂\")h=h..newHTMLRow(\"Hydrogen\",\"Oxygen\")h=h..newHTMLRow(\"Hydrogen\",\"Oxygen\",true)h=h..B.r1 ..B.th4 ..B.re;h=h..B.te..B.de;C.setHTML(h)end;if D then local h=B.h1 ..B.d1 ..B.t2;h=h..newHTMLHeader(\"T5 Ores\",\"T5 Pures\")h=h..newHTMLRow(\"Rhodonite\",\"Manganese\")h=h..newHTMLRow(\"Columbite\",\"Niobium\")h=h..newHTMLRow(\"Illmenite\",\"Titanium\")h=h..newHTMLRow(\"Vanadinite\",\"Vanadium\")h=h..newHTMLHeader(\"T4 Ores\",\"T4 Pures\")h=h..newHTMLRow(\"Cobaltite\",\"Cobalt\")h=h..newHTMLRow(\"Cryolite\",\"Fluorine\")h=h..newHTMLRow(\"GoldNuggets\",\"Gold\")h=h..newHTMLRow(\"Kolbeckite\",\"Scandium\")h=h..newHTMLHeader(\"Alloys\",\"Alloys\")h=h..newHTMLRow(\"Silumin\",\"Steel\")h=h..newHTMLRow(\"AlFe\",\"CaRefCu\")h=h..newHTMLRow(\"Stainless steel\",\"Duralumin\")h=h..B.r1 ..B.th4 ..B.re;h=h..B.te..B.de;D.setHTML(h)end end;dataUpdates={}assemblies={}alerts={}function refreshIndustryScreens(C,D,E)function newHTMLRow(X,a0,a4,a5,a6,a7)resHTML=[[<tr style=\"color: ]]..a6 ..[[; font-size: ]]..a7 ..[[em;\">>\r\n]]..B.thL..[[&nbsp;</th>\r\n]]..B.thL..B.nbr..X..B.nbre..[[</th>\r\n]]..B.thL..B.nbr..a0 ..B.nbre..[[</th>\r\n]]..B.thR..B.nbr..a4 ..B.nbre..[[</th>\r\n]]..B.thL..B.nbr..a5 ..B.nbre..[[</th>\r\n</tr>]]return resHTML end;function processData(J,E)local a=tonumber(J)if not a then return end;debug(a,\"Processing #\"..a)local a8=databank.getIntValue(a..\"_updated\")if not E and a8~=1 then debug(a,\"Skipping #\"..a..\" (not changed)\")return end;local a9=databank.getStringValue(a)if a9==nil or a9==\"\"then debug(a,\"Skipping #\"..a..\" (data missing)\")return end;local aa=json.decode(a9)if not aa or type(aa)~=\"table\"or not aa.status then debug(a,\"Skipping #\"..a..\" (data invalid)\")return end;debug(a,a..\" status=\"..aa.status)local i=core.getElementNameById(a)local ab=core.getElementTypeById(a)if ab==\"assembly line\"then local u,a7=assemblySize(a)local ac=\"\"if not string.find(i,\"%[\")then ac=i end;debug(a,a..\" Assembly \"..assemblySize(a)..\" : \"..aa.status)assemblies[u*10000+a]={name=i,size=a7,id=a,product=ac,status=aa.status}else local ad=ab..\"_\"..i..\"_\"..a;debug(a,a..\" : \"..ab..\"[\"..i..\"] : \"..aa.status)if aa.status:find(\"JAMMED\")==1 then alerts[ad]={name=i,machine=ab,id=a,status=aa.status}else alerts[ad]=nil end end;if a8==1 then dataUpdates[a]=1 end end;local ae=databank.getKeys()if ae==nil or ae==\"\"then return end;local af=json.decode(ae)for r,J in ipairs(af)do processData(J,E)end;processDataUpdates()local ag={}for ah in pairs(assemblies)do table.insert(ag,ah)end;table.sort(ag)if C then local h=B.h1 ..B.d1 ..B.t1;h=h..B.r1 ..B.thL..\"&nbsp;\"..B.the..B.thL2 ..\"Assm. - Making\"..B.the..B.thR..\"#&nbsp;\"..B.the..B.thL..\"Status\"..B.the..B.re;for r,ah in ipairs(ag)do local ai=assemblies[ah]local a6=z;local aj=ai.status;if aj==\"JAMMED_MISSING_INGREDIENT\"then a6=y;aj=\"WAITING\"elseif aj==\"RUNNING\"then a6=w elseif aj==\"STOPPED\"then a6=x elseif aj:find(\"JAMMED\")==1 then a6=z end;h=h..newHTMLRow(ai.size,ai.product,ai.id..\"&nbsp;\",aj,a6,FontSize)end;h=h..B.te..B.de;C.setHTML(h)end;local ak={}for ah in pairs(alerts)do table.insert(ak,ah)end;table.sort(ak)if D then local h=B.h1 ..B.d1 ..B.t1;h=h..B.r1 ..B.thL..\"&nbsp;\"..B.the..B.thL2 ..\"Machine\"..B.the..B.thR..\"#\"..B.the..B.thL..\"Alert\"..B.the..B.re;for r,ah in ipairs(ak)do local al=alerts[ah]local a6=z;local aj=al.status;if aj==\"JAMMED_MISSING_INGREDIENT\"then a6=y;aj=\"WAITING\"elseif aj:find(\"JAMMED\")==1 then a6=z end;local type=al.machine;if type==\"electronics industry\"then type=\"elec. ind.\"end;h=h..newHTMLRow(type,al.name,al.id..\"&nbsp;\",aj,a6,FontSize)end;h=h..B.te..B.de;D.setHTML(h)end end;function refreshScreens(E)refreshContainerDisplay(d[1],d[2],E)refreshIndustryScreens(e[1],e[2],E)end;function processFirst()unit.stopTimer(\"First\")refreshScreens(true)end;function processDataUpdates()if not databank then return end;local am=DataThrottle;for J,aa in pairs(dataUpdates)do am=am-1;if am==0 then return end;debug(J,\"Resetting update flag for \"..J)databank.setIntValue(J..\"_updated\",0)dataUpdates[J]=nil end;if next(dataUpdates)==nil then databank.setIntValue(\"updated\",0)end end;function processTick()local an,ao=xpcall(function()refreshScreens(false)end,traceback)if not an then system.print(ao)end end;function onStop()for r,c in pairs(unit)do if slotValid(c)then if c.setHTML then c.clear()end end end end;system.print(\"InDUstry Status\")local databank=nil;if debugId>0 then system.print(\"Debugging #\"..debugId)end;onStart()unit.setTimer(\"First\",1)unit.setTimer(\"Live\",7)unit.setTimer(\"WriteData\",3)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"onStop()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"processFirst()","filter":{"args":[{"value":"First"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"processTick()","filter":{"args":[{"value":"Live"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"processDataUpdates()","filter":{"args":[{"value":"WriteData"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}